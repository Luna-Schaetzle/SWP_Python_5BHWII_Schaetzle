import sys
import random
import json  # NEU: F√ºr das Speichern und Laden des Spiels
from faker import Faker  # NEU: F√ºr die Generierung zuf√§lliger G√§stedaten

fake = Faker()  # NEU: Initialisierung von Faker

class Room:
    def __init__(self, room_no, room_type, room_price, room_status):
        self.room_no = room_no
        self.room_type = room_type
        self.room_price = room_price
        self.room_status = room_status

    def get_room_status(self):
        return self.room_status
    
    def get_room_type(self):
        return self.room_type

    def get_room_price(self):
        return self.room_price

class Guest:
    def __init__(self, name, age, phone_no):
        self.name = name
        self.age = age
        self.phone_no = phone_no

class Booking:
    def __init__(self, room, guest, check_in_day, check_out_day):
        self.room = room
        self.guest = guest
        self.check_in_day = check_in_day
        self.check_out_day = check_out_day

    def get_booking_details(self):
        return {
            'Room No': self.room.room_no,
            'Room Type': self.room.room_type,
            'Nights': self.check_out_day - self.check_in_day,
            'Guest Name': self.guest.name,
            'Check In Day': self.check_in_day,
            'Check Out Day': self.check_out_day
        }

class Hotel:
    def __init__(self, name, rooms, initial_balance):
        self.name = name
        self.rooms = rooms
        self.bookings = []
        self.balance = initial_balance
        self.current_day = 1
        self.reputation = 50
        self.staff = []
        self.maintenance_cost_per_room = 10
        self.guest_queue = []  # NEU: G√§steschlange
        self.income = 0  # NEU: Einnahmen
        self.expenses = 0  # NEU: Ausgaben

    def get_daily_costs(self):
        staff_cost = len(self.staff) * 50
        maintenance_cost = len(self.rooms) * self.maintenance_cost_per_room
        return staff_cost + maintenance_cost

    def get_available_rooms(self, check_in_day, check_out_day, room_type=None):
        """
        Gibt alle verf√ºgbaren Zimmer zur√ºck. Optional kann room_type angegeben werden,
        um nur bestimmte Zimmertypen zu filtern.
        """
        available_rooms = []
        for room in self.rooms:
            if room.get_room_status() == 'Available':
                if self.is_room_available(room, check_in_day, check_out_day):
                    if room_type is None or room.room_type == room_type:
                        available_rooms.append(room)
        return available_rooms

    def is_room_available(self, room, check_in, check_out):
        for booking in self.bookings:
            if booking.room == room:
                # √úberschneidet sich der Zeitraum?
                if (check_in < booking.check_out_day) and (check_out > booking.check_in_day):
                    return False
        return True

    def book_room(self, room, guest, check_in, check_out):
        if self.is_room_available(room, check_in, check_out):
            booking = Booking(room, guest, check_in, check_out)
            self.bookings.append(booking)
            return booking
        return None

    def process_day(self):
        # Einnahmen berechnen
        daily_income = 0  # NEU: Tageseinnahmen
        for booking in self.bookings:
            # Wenn der Gast in diesem Zimmer √ºbernachtet (aktueller Tag liegt im Buchungszeitraum)
            if booking.check_in_day <= self.current_day < booking.check_out_day:
                daily_income += booking.room.room_price
        self.balance += daily_income
        self.income += daily_income  # NEU: Gesamt einnahmen aktualisieren

        # T√§gliche Kosten abziehen
        daily_costs = self.get_daily_costs()
        self.balance -= daily_costs
        self.expenses += daily_costs  # NEU: Gesamt Ausgaben aktualisieren

        # Zufallsereignisse und neue G√§ste
        self.handle_random_events()

        # G√§steschlange verarbeiten (optional, je nach Design)
        # self.process_guest_queue()  # NEU: G√§steschlange verarbeiten (kann deaktiviert werden)

        # Ruf aktualisieren
        self.update_reputation()

        # Zum n√§chsten Tag
        self.current_day += 1

    def handle_random_events(self):
        # Mit 20% Wahrscheinlichkeit tritt ein Ereignis auf
        if random.randint(1, 100) <= 20:
            # NEU: F√ºge 'new_guest_event' als m√∂gliches Ereignis hinzu
            event = random.choice(['VIP', 'maintenance', 'compliment', 'complaint', 'new_guest_event'])
            
            if event == 'VIP':
                suites = [r for r in self.rooms if r.room_type == 'Suite' and r.room_status == 'Available']
                if suites and self.is_room_available(suites[0], self.current_day, self.current_day+1):
                    print("\nüåü VIP-Gast m√∂chte eine Suite buchen! (Doppelte Einnahmen)")
                    if input("Annehmen? (j/n): ").lower() == 'j':
                        guest = Guest("VIP Gast", 45, "000-000000")
                        booking = self.book_room(suites[0], guest, self.current_day, self.current_day+1)
                        if booking:
                            # VIP zahlt doppelt
                            self.balance += suites[0].room_price
                            self.income += suites[0].room_price  # NEU: Zus√§tzliche Einnahmen
                            self.reputation += 5

            elif event == 'maintenance':
                # Zuf√§lliges Zimmer belegen
                room = random.choice(self.rooms)
                room.room_status = 'Not Available'
                cost = random.randint(50, 200)
                self.balance -= cost
                self.expenses += cost  # NEU: Zus√§tzliche Ausgaben
                print(f"\nüîß Raum {room.room_no} ben√∂tigt Wartung! Kosten: ‚Ç¨{cost}")

            elif event == 'compliment':
                print("\nüòä Ein Gast lobt den ausgezeichneten Service!")
                self.reputation += 10

            elif event == 'complaint':
                print("\nüò° Ein Gast beschwert sich √ºber schmutzige Zimmer!")
                self.reputation -= 10

            # NEU: Zus√§tzliche Ereignisse
            elif event == 'new_guest_event':
                # Ein neuer Gast m√∂chte buchen und wird der G√§steschlange hinzugef√ºgt
                requested_type = random.choice(['Single', 'Double', 'Suite'])
                requested_nights = random.randint(1, 5)
                # Generiere zuf√§llige G√§stedaten mit Faker
                guest_name = fake.name()
                guest_age = random.randint(18, 75)
                guest_phone = fake.phone_number()
                guest = Guest(guest_name, guest_age, guest_phone)
                print(f"\nüö™ Ein neuer Gast namens {guest.name} m√∂chte ein {requested_type}-Zimmer f√ºr {requested_nights} Nacht/N√§chte buchen.")
                self.guest_queue.append((guest, requested_type, requested_nights))
            
            # Reputation in Grenzen halten
            self.reputation = max(0, min(100, self.reputation))

    def process_guest_queue(self):  # NEU
        if self.guest_queue:
            print("\nüìã G√§steschlange:")
            for idx, (guest, room_type, nights) in enumerate(self.guest_queue, start=1):
                print(f"{idx}. {guest.name}, Alter: {guest.age}, Telefon: {guest.phone_no} m√∂chte ein {room_type}-Zimmer f√ºr {nights} Nacht/N√§chte.")
            
            while True:
                try:
                    choice = input("\nM√∂chtest du eine Buchungsanfrage bearbeiten? (j/n): ").lower()
                    if choice == 'j':
                        guest_idx = int(input("Gib die Nummer des Gastes ein, den du bearbeiten m√∂chtest: ")) - 1
                        if 0 <= guest_idx < len(self.guest_queue):
                            guest, room_type, nights = self.guest_queue.pop(guest_idx)
                            available_rooms = self.get_available_rooms(self.current_day, self.current_day + nights, room_type)
                            if available_rooms:
                                print(f"\nüìã Buchungsanfrage von {guest.name}: {room_type}-Zimmer f√ºr {nights} Nacht/N√§chte.")
                                decision = input("Annehmen? (j/n): ").lower()
                                if decision == 'j':
                                    booking = self.book_room(available_rooms[0], guest, self.current_day, self.current_day + nights)
                                    if booking:
                                        print("‚úÖ Buchung angenommen!")
                                        self.reputation += 1
                                else:
                                    print(f"‚ùå Buchungsanfrage von {guest.name} abgelehnt.")
                                    self.reputation -= 1
                            else:
                                print(f"\nüìã Buchungsanfrage von {guest.name}: Kein {room_type}-Zimmer verf√ºgbar. Buchung abgelehnt.")
                                self.reputation -= 2
                        else:
                            print("‚ùå Ung√ºltige Nummer!")
                    elif choice == 'n':
                        break
                    else:
                        print("‚ùå Ung√ºltige Eingabe!")
                except ValueError:
                    print("‚ùå Ung√ºltige Eingabe!")

    def update_reputation(self):
        # Auf Basis der Auslastung Reputation anpassen
        # (Sehr einfache Logik: pro belegtem Zimmer ein kleiner Bonus, fester Malus)
        occupancy = self.get_occupancy_rate()
        self.reputation += int(occupancy * 5) - 2
        self.reputation = max(0, min(100, self.reputation))

    def get_occupancy_rate(self):
        """
        Aktuelle Auslastung am heutigen Tag (Anteil gebuchter Zimmer).
        Da Buchungen √ºber mehrere Tage laufen k√∂nnen, z√§hlen wir,
        wie viele Zimmer am current_day belegt sind.
        """
        occupied = 0
        for room in self.rooms:
            for booking in self.bookings:
                if booking.room == room and (booking.check_in_day <= self.current_day < booking.check_out_day):
                    occupied += 1
                    break
        if len(self.rooms) == 0:
            return 0
        return occupied / len(self.rooms)

    # NEU: Methoden zum Speichern und Laden des Spiels
    def save_game(self, filename="hotel_save.json"):
        data = {
            'name': self.name,
            'rooms': [{'room_no': r.room_no, 'room_type': r.room_type, 'room_price': r.room_price, 'room_status': r.room_status} for r in self.rooms],
            'bookings': [{'room_no': b.room.room_no, 'guest_name': b.guest.name, 'guest_age': b.guest.age, 'guest_phone': b.guest.phone_no,
                          'check_in_day': b.check_in_day, 'check_out_day': b.check_out_day} for b in self.bookings],
            'balance': self.balance,
            'current_day': self.current_day,
            'reputation': self.reputation,
            'staff': self.staff,
            'income': self.income,
            'expenses': self.expenses,
            'guest_queue': [{'name': g.name, 'age': g.age, 'phone_no': g.phone_no, 'room_type': rt, 'nights': n} for (g, rt, n) in self.guest_queue]
        }
        with open(filename, 'w') as f:
            json.dump(data, f, indent=4)
        print(f"üíæ Spiel gespeichert unter '{filename}'.")

    @staticmethod
    def load_game(filename="hotel_save.json"):
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
            rooms = [Room(r['room_no'], r['room_type'], r['room_price'], r['room_status']) for r in data['rooms']]
            hotel = Hotel(data['name'], rooms, data['balance'])
            hotel.current_day = data['current_day']
            hotel.reputation = data['reputation']
            hotel.staff = data['staff']
            hotel.income = data['income']
            hotel.expenses = data['expenses']
            for b in data['bookings']:
                room = next((room for room in rooms if room.room_no == b['room_no']), None)
                if room:
                    guest = Guest(b['guest_name'], b['guest_age'], b['guest_phone'])
                    booking = Booking(room, guest, b['check_in_day'], b['check_out_day'])
                    hotel.bookings.append(booking)
            for g in data['guest_queue']:
                guest = Guest(g['name'], g['age'], g['phone_no'])
                hotel.guest_queue.append((guest, g['room_type'], g['nights']))
            print(f"üìÇ Spiel geladen von '{filename}'.")
            return hotel
        except FileNotFoundError:
            print(f"‚ùå Datei '{filename}' nicht gefunden. Ein neues Spiel wird gestartet.")
            return None
        except Exception as e:
            print(f"‚ùå Fehler beim Laden des Spiels: {e}")
            return None

def main():
    print("üè® Willkommen zum Hotel Management Spiel!")
    print("1. Neues Spiel starten")
    print("2. Spiel laden")
    choice = input("Auswahl: ")

    if choice == "1":
        # Initialisierung
        rooms = [
            Room(101, "Single", 50, "Available"),
            Room(102, "Double", 80, "Available"),
            Room(103, "Suite", 150, "Available")
        ]
        hotel = Hotel("Grand Hotel", rooms, initial_balance=2000)
    elif choice == "2":
        hotel = Hotel.load_game()
        if not hotel:
            # Falls Laden fehlgeschlagen, starte ein neues Spiel
            rooms = [
                Room(101, "Single", 50, "Available"),
                Room(102, "Double", 80, "Available"),
                Room(103, "Suite", 150, "Available")
            ]
            hotel = Hotel("Grand Hotel", rooms, initial_balance=2000)
    else:
        print("‚ùå Ung√ºltige Auswahl!")
        return

    while True:
        print(f"\n--- Tag {hotel.current_day} ---")
        print(f"üí∞ Kontostand: ‚Ç¨{hotel.balance}")
        print(f"üìà Ruf: {hotel.reputation}/100")
        print(f"üíº Mitarbeiter: {len(hotel.staff)}")
        print("1. Zimmer anzeigen")
        print("2. Zimmer buchen")
        print("3. Preise √§ndern")
        print("4. Zimmer upgraden")
        print("5. Personal einstellen")
        print("6. N√§chsten Tag verarbeiten")
        print("7. Hotel erweitern (neue Zimmer kaufen)")
        print("8. Spiel speichern")
        print("9. Spiel laden")
        print("10. G√§steschlange anzeigen und bearbeiten")  # NEU: Men√ºpunkt zur G√§steschlange
        print("11. Beenden")
        
        choice = input("Auswahl: ")
        
        if choice == "1":
            available = hotel.get_available_rooms(hotel.current_day, hotel.current_day+1)
            print("\nVerf√ºgbare Zimmer (f√ºr heute Nacht):")
            if not available:
                print("Keine Zimmer verf√ºgbar.")
            for r in available:
                status = "üü¢" if r.room_status == "Available" else "üî¥"
                print(f"{status} Zimmer {r.room_no} ({r.room_type}): ‚Ç¨{r.room_price}/Nacht")

        elif choice == "2":
            # Manuelles Buchen durch den Spieler
            name = input("Gastname: ")
            try:
                age = int(input("Alter: "))
            except ValueError:
                print("‚ùå Ung√ºltiges Alter!")
                continue
            phone = input("Telefon: ")
            guest = Guest(name, age, phone)
            
            # Zimmer f√ºr den gew√ºnschten Zeitraum
            # Hier vereinfachend: Wir gehen davon aus, dass ab heute gebucht wird
            available = hotel.get_available_rooms(hotel.current_day, hotel.current_day+1)
            if not available:
                print("Keine Zimmer verf√ºgbar!")
                continue
            
            print("\nVerf√ºgbare Zimmer:")
            for i, r in enumerate(available):
                print(f"{i+1}. Zimmer {r.room_no} ({r.room_type}) - ‚Ç¨{r.room_price}/Nacht")
            
            try:
                room_idx = int(input("Bitte Zimmerauswahl eingeben (Index): "))-1
                nights = int(input("N√§chte: "))
                if room_idx < 0 or room_idx >= len(available):
                    print("‚ùå Ung√ºltiger Index!")
                    continue
                room = available[room_idx]
                
                booking = hotel.book_room(room, guest, hotel.current_day, hotel.current_day+nights)
                if booking:
                    print(f"‚úÖ Buchung erfolgreich f√ºr {nights} N√§chte!")
                else:
                    print("‚ùå Zimmer nicht verf√ºgbar!")
            except ValueError:
                print("‚ùå Ung√ºltige Eingabe!")
            except Exception as e:
                print(f"‚ùå Fehler: {e}")

        elif choice == "3":
            # Preise manuell √§ndern
            for r in hotel.rooms:
                print(f"Zimmer {r.room_no} ({r.room_type}): Aktuell ‚Ç¨{r.room_price}")
            try:
                room_no = int(input("Zimmernummer, dessen Preis ge√§ndert werden soll: "))
                new_price = int(input("Neuer Preis: "))
                room_found = False
                for r in hotel.rooms:
                    if r.room_no == room_no:
                        r.room_price = new_price
                        print("‚úÖ Preis aktualisiert!")
                        room_found = True
                        break
                if not room_found:
                    print("‚ùå Zimmernummer nicht gefunden!")
            except ValueError:
                print("‚ùå Ung√ºltige Eingabe f√ºr Zimmernummer oder Preis!")

        elif choice == "4":
            # Zimmer upgraden
            print("Zimmer upgraden (Kosten: Single ‚Ç¨200, Double ‚Ç¨300, Suite ‚Ç¨500)")
            for r in hotel.rooms:
                print(f"Zimmer {r.room_no}: {r.room_type} (aktueller Preis: ‚Ç¨{r.room_price})")
            try:
                room_no = int(input("Zimmernummer: "))
                new_type = input("Neuer Typ (Single/Double/Suite): ").capitalize()
                
                if new_type not in ["Single", "Double", "Suite"]:
                    print("‚ùå Ung√ºltiger Zimmertyp!")
                    continue
                
                cost_map = {"Single": 200, "Double": 300, "Suite": 500}
                price_map = {"Single": 50, "Double": 80, "Suite": 150}
                
                if new_type not in cost_map:
                    print("‚ùå Ung√ºltiger Zimmertyp!")
                    continue

                cost = cost_map[new_type]
                if hotel.balance >= cost:
                    upgraded = False
                    for r in hotel.rooms:
                        if r.room_no == room_no:
                            r.room_type = new_type
                            r.room_price = price_map[new_type]
                            hotel.balance -= cost
                            hotel.expenses += cost  # NEU: Ausgaben aktualisieren
                            print("‚úÖ Upgrade erfolgreich!")
                            upgraded = True
                            break
                    if not upgraded:
                        print("‚ùå Zimmernummer nicht gefunden!")
                else:
                    print("‚ùå Nicht genug Geld f√ºr ein Upgrade!")
            except ValueError:
                print("‚ùå Ung√ºltige Eingabe!")
            except Exception as e:
                print(f"‚ùå Fehler: {e}")

        elif choice == "5":
            # Personal einstellen
            cost = 50
            print(f"Personal einstellen (Kostet t√§glich ‚Ç¨{cost} pro Person).")
            if input("Einstellen? (j/n): ").lower() == 'j':
                hotel.staff.append("Mitarbeiter")
                print(f"üë®üíº Aktuelle Anzahl Mitarbeiter: {len(hotel.staff)}")

        elif choice == "6":
            # N√§chster Tag
            hotel.process_day()
            print("\n=== Tageszusammenfassung ===")
            print(f"Einnahmen heute: ‚Ç¨{hotel.income - (hotel.income - (hotel.balance - hotel.expenses))}")
            print(f"Ausgaben heute: ‚Ç¨{hotel.expenses}")
            print(f"Neuer Kontostand: ‚Ç¨{hotel.balance}")
            print(f"Gesamteinnahmen: ‚Ç¨{hotel.income}")
            print(f"Gesamtausgaben: ‚Ç¨{hotel.expenses}")
            
            if hotel.balance <= 0:
                print("‚ùå GAME OVER - Kein Geld mehr!")
                break

        elif choice == "7":
            # ERWEITERUNG: Hotel (Zimmer) kaufen
            print("Hotel erweitern - neue Zimmer kaufen")
            print("Single-Zimmer = 1.000‚Ç¨, Double-Zimmer = 1.500‚Ç¨, Suite = 2.000‚Ç¨")
            new_type = input("Welchen Zimmertyp m√∂chtest du hinzuf√ºgen? (Single/Double/Suite): ").capitalize()
            cost_map = {"Single": 1000, "Double": 1500, "Suite": 2000}
            price_map = {"Single": 50, "Double": 80, "Suite": 150}
            
            if new_type not in cost_map:
                print("‚ùå Ung√ºltiger Zimmertyp!")
                continue
            
            try:
                anzahl = int(input("Wie viele Zimmer dieses Typs m√∂chtest du bauen? "))
                if anzahl <= 0:
                    print("‚ùå Ung√ºltige Anzahl!")
                    continue
            except ValueError:
                print("‚ùå Ung√ºltige Eingabe f√ºr Anzahl!")
                continue
            
            total_cost = cost_map[new_type] * anzahl
            if hotel.balance >= total_cost:
                # Finde die aktuell h√∂chste Zimmernummer
                max_room_no = max(r.room_no for r in hotel.rooms) if hotel.rooms else 100
                for i in range(1, anzahl+1):
                    new_room_no = max_room_no + i
                    # F√ºge neues Zimmer hinzu
                    new_room = Room(
                        room_no=new_room_no,
                        room_type=new_type,
                        room_price=price_map[new_type],
                        room_status="Available"
                    )
                    hotel.rooms.append(new_room)
                
                hotel.balance -= total_cost
                hotel.expenses += total_cost  # NEU: Ausgaben aktualisieren
                print(f"‚úÖ {anzahl} neue '{new_type}'-Zimmer gebaut!")
            else:
                print("‚ùå Nicht genug Geld, um diese Zimmer zu bauen!")

        elif choice == "8":
            # NEU: Spiel speichern
            filename = input("Gib einen Dateinamen zum Speichern ein (z.B. 'mein_hotel_save.json'): ")
            hotel.save_game(filename)

        elif choice == "9":
            # NEU: Spiel laden
            filename = input("Gib den Dateinamen zum Laden ein (z.B. 'mein_hotel_save.json'): ")
            loaded_hotel = Hotel.load_game(filename)
            if loaded_hotel:
                hotel = loaded_hotel

        elif choice == "10":
            # NEU: G√§steschlange anzeigen und bearbeiten
            if not hotel.guest_queue:
                print("\nüìã Die G√§steschlange ist leer.")
            else:
                hotel.process_guest_queue()

        elif choice == "11":
            print("Auf Wiedersehen!")
            break

        else:
            print("‚ùå Ung√ºltige Auswahl!")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"Fehler: {e}")
        sys.exit(1)
